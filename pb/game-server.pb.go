// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game-server.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	game-server.proto

It has these top-level messages:
	CreateUserRequest
	CreateUserResponse
	LoginRequest
	LoginResponse
	RegisterToChannelRequest
	RegisterToChannelResponse
	SendToChannelRequest
	SendToChannelResponse
	GetTilesRequest
	RGBA
	RGBARow
	GetTilesResponse
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateUserRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{0} }

func (m *CreateUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type CreateUserResponse struct {
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{1} }

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{2} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{3} }

type RegisterToChannelRequest struct {
	ChannelName string `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
}

func (m *RegisterToChannelRequest) Reset()         { *m = RegisterToChannelRequest{} }
func (m *RegisterToChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterToChannelRequest) ProtoMessage()    {}
func (*RegisterToChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorGameServer, []int{4}
}

func (m *RegisterToChannelRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

type RegisterToChannelResponse struct {
}

func (m *RegisterToChannelResponse) Reset()         { *m = RegisterToChannelResponse{} }
func (m *RegisterToChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterToChannelResponse) ProtoMessage()    {}
func (*RegisterToChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorGameServer, []int{5}
}

type SendToChannelRequest struct {
	ChannelName string `protobuf:"bytes,1,opt,name=channelName,proto3" json:"channelName,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Message     string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SendToChannelRequest) Reset()                    { *m = SendToChannelRequest{} }
func (m *SendToChannelRequest) String() string            { return proto.CompactTextString(m) }
func (*SendToChannelRequest) ProtoMessage()               {}
func (*SendToChannelRequest) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{6} }

func (m *SendToChannelRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *SendToChannelRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SendToChannelRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SendToChannelResponse struct {
}

func (m *SendToChannelResponse) Reset()                    { *m = SendToChannelResponse{} }
func (m *SendToChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*SendToChannelResponse) ProtoMessage()               {}
func (*SendToChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{7} }

type GetTilesRequest struct {
	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *GetTilesRequest) Reset()                    { *m = GetTilesRequest{} }
func (m *GetTilesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTilesRequest) ProtoMessage()               {}
func (*GetTilesRequest) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{8} }

func (m *GetTilesRequest) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GetTilesRequest) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type RGBA struct {
	R int64 `protobuf:"varint,1,opt,name=R,proto3" json:"R,omitempty"`
	G int64 `protobuf:"varint,2,opt,name=G,proto3" json:"G,omitempty"`
	B int64 `protobuf:"varint,3,opt,name=B,proto3" json:"B,omitempty"`
	A int64 `protobuf:"varint,4,opt,name=A,proto3" json:"A,omitempty"`
}

func (m *RGBA) Reset()                    { *m = RGBA{} }
func (m *RGBA) String() string            { return proto.CompactTextString(m) }
func (*RGBA) ProtoMessage()               {}
func (*RGBA) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{9} }

func (m *RGBA) GetR() int64 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *RGBA) GetG() int64 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *RGBA) GetB() int64 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *RGBA) GetA() int64 {
	if m != nil {
		return m.A
	}
	return 0
}

type RGBARow struct {
	Row map[int64]*RGBA `protobuf:"bytes,1,rep,name=row" json:"row,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RGBARow) Reset()                    { *m = RGBARow{} }
func (m *RGBARow) String() string            { return proto.CompactTextString(m) }
func (*RGBARow) ProtoMessage()               {}
func (*RGBARow) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{10} }

func (m *RGBARow) GetRow() map[int64]*RGBA {
	if m != nil {
		return m.Row
	}
	return nil
}

type GetTilesResponse struct {
	Tiles map[int64]*RGBARow `protobuf:"bytes,1,rep,name=tiles" json:"tiles,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetTilesResponse) Reset()                    { *m = GetTilesResponse{} }
func (m *GetTilesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTilesResponse) ProtoMessage()               {}
func (*GetTilesResponse) Descriptor() ([]byte, []int) { return fileDescriptorGameServer, []int{11} }

func (m *GetTilesResponse) GetTiles() map[int64]*RGBARow {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateUserRequest)(nil), "pb.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "pb.CreateUserResponse")
	proto.RegisterType((*LoginRequest)(nil), "pb.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "pb.LoginResponse")
	proto.RegisterType((*RegisterToChannelRequest)(nil), "pb.RegisterToChannelRequest")
	proto.RegisterType((*RegisterToChannelResponse)(nil), "pb.RegisterToChannelResponse")
	proto.RegisterType((*SendToChannelRequest)(nil), "pb.SendToChannelRequest")
	proto.RegisterType((*SendToChannelResponse)(nil), "pb.SendToChannelResponse")
	proto.RegisterType((*GetTilesRequest)(nil), "pb.GetTilesRequest")
	proto.RegisterType((*RGBA)(nil), "pb.RGBA")
	proto.RegisterType((*RGBARow)(nil), "pb.RGBARow")
	proto.RegisterType((*GetTilesResponse)(nil), "pb.GetTilesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GameServer service

type GameServerClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RegisterToChannel(ctx context.Context, in *RegisterToChannelRequest, opts ...grpc.CallOption) (GameServer_RegisterToChannelClient, error)
	SendToChannel(ctx context.Context, in *SendToChannelRequest, opts ...grpc.CallOption) (*SendToChannelResponse, error)
	GetTiles(ctx context.Context, in *GetTilesRequest, opts ...grpc.CallOption) (*GetTilesResponse, error)
}

type gameServerClient struct {
	cc *grpc.ClientConn
}

func NewGameServerClient(cc *grpc.ClientConn) GameServerClient {
	return &gameServerClient{cc}
}

func (c *gameServerClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/pb.GameServer/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/pb.GameServer/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) RegisterToChannel(ctx context.Context, in *RegisterToChannelRequest, opts ...grpc.CallOption) (GameServer_RegisterToChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GameServer_serviceDesc.Streams[0], c.cc, "/pb.GameServer/RegisterToChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServerRegisterToChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameServer_RegisterToChannelClient interface {
	Recv() (*RegisterToChannelResponse, error)
	grpc.ClientStream
}

type gameServerRegisterToChannelClient struct {
	grpc.ClientStream
}

func (x *gameServerRegisterToChannelClient) Recv() (*RegisterToChannelResponse, error) {
	m := new(RegisterToChannelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServerClient) SendToChannel(ctx context.Context, in *SendToChannelRequest, opts ...grpc.CallOption) (*SendToChannelResponse, error) {
	out := new(SendToChannelResponse)
	err := grpc.Invoke(ctx, "/pb.GameServer/SendToChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) GetTiles(ctx context.Context, in *GetTilesRequest, opts ...grpc.CallOption) (*GetTilesResponse, error) {
	out := new(GetTilesResponse)
	err := grpc.Invoke(ctx, "/pb.GameServer/GetTiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameServer service

type GameServerServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	RegisterToChannel(*RegisterToChannelRequest, GameServer_RegisterToChannelServer) error
	SendToChannel(context.Context, *SendToChannelRequest) (*SendToChannelResponse, error)
	GetTiles(context.Context, *GetTilesRequest) (*GetTilesResponse, error)
}

func RegisterGameServerServer(s *grpc.Server, srv GameServerServer) {
	s.RegisterService(&_GameServer_serviceDesc, srv)
}

func _GameServer_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameServer/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameServer/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_RegisterToChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterToChannelRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServerServer).RegisterToChannel(m, &gameServerRegisterToChannelServer{stream})
}

type GameServer_RegisterToChannelServer interface {
	Send(*RegisterToChannelResponse) error
	grpc.ServerStream
}

type gameServerRegisterToChannelServer struct {
	grpc.ServerStream
}

func (x *gameServerRegisterToChannelServer) Send(m *RegisterToChannelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GameServer_SendToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).SendToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameServer/SendToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).SendToChannel(ctx, req.(*SendToChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_GetTiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).GetTiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameServer/GetTiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).GetTiles(ctx, req.(*GetTilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameServer",
	HandlerType: (*GameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GameServer_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GameServer_Login_Handler,
		},
		{
			MethodName: "SendToChannel",
			Handler:    _GameServer_SendToChannel_Handler,
		},
		{
			MethodName: "GetTiles",
			Handler:    _GameServer_GetTiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterToChannel",
			Handler:       _GameServer_RegisterToChannel_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game-server.proto",
}

func init() { proto.RegisterFile("game-server.proto", fileDescriptorGameServer) }

var fileDescriptorGameServer = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xed, 0x86, 0x86, 0x49, 0xab, 0x26, 0x4b, 0x0a, 0xae, 0xf9, 0x2b, 0x7b, 0x40, 0xbd,
	0xd4, 0x42, 0x41, 0x08, 0x84, 0x00, 0x91, 0x54, 0xad, 0x0f, 0x20, 0x0e, 0xdb, 0xf0, 0x00, 0x0e,
	0x1d, 0x85, 0x88, 0xd4, 0x36, 0x5e, 0xa7, 0x69, 0xde, 0x82, 0x67, 0xe3, 0x89, 0xd8, 0xdf, 0xc4,
	0x71, 0x9d, 0x03, 0xea, 0x21, 0x52, 0xbe, 0x6f, 0x66, 0xbe, 0xf9, 0x26, 0x33, 0x1b, 0xe8, 0x8c,
	0xe3, 0x2b, 0x3c, 0xe1, 0x98, 0x5f, 0x63, 0x1e, 0x66, 0x79, 0x5a, 0xa4, 0xc4, 0xcd, 0x46, 0xf4,
	0x0b, 0x74, 0x4e, 0x73, 0x8c, 0x0b, 0xfc, 0x2e, 0x42, 0x0c, 0x7f, 0xcf, 0x90, 0x17, 0x24, 0x80,
	0xe6, 0x4c, 0xc0, 0x44, 0x54, 0xf8, 0xce, 0x91, 0x73, 0x7c, 0x9f, 0x2d, 0xb1, 0x8c, 0x65, 0x31,
	0xe7, 0xf3, 0x34, 0xbf, 0xf4, 0x5d, 0x1d, 0xb3, 0x98, 0x76, 0x81, 0x94, 0xc5, 0x78, 0x96, 0x26,
	0x1c, 0xe9, 0x39, 0xec, 0x7e, 0x4d, 0xc7, 0x93, 0xe4, 0xae, 0xea, 0xfb, 0xb0, 0x67, 0x74, 0x8c,
	0xf0, 0x07, 0xf0, 0x19, 0x8e, 0x27, 0xbc, 0xc0, 0x7c, 0x98, 0x9e, 0xfe, 0x8c, 0x93, 0x04, 0xa7,
	0xb6, 0xc9, 0x11, 0xb4, 0x7e, 0x68, 0xe6, 0xdb, 0xaa, 0x4f, 0x99, 0xa2, 0x8f, 0xe1, 0xb0, 0xa6,
	0xda, 0x48, 0x27, 0xd0, 0xbd, 0xc0, 0xe4, 0xf2, 0xff, 0x65, 0xd7, 0xa6, 0x73, 0x2b, 0xd3, 0xf9,
	0xb0, 0x73, 0x85, 0x9c, 0xc7, 0x63, 0xf4, 0x3d, 0x15, 0xb2, 0x90, 0x3e, 0x82, 0x83, 0x4a, 0x3f,
	0x63, 0xe4, 0x04, 0xf6, 0x23, 0x2c, 0x86, 0x93, 0x29, 0x72, 0xeb, 0x61, 0x17, 0x9c, 0x1b, 0xd5,
	0xd9, 0x63, 0xce, 0x8d, 0x44, 0x0b, 0xd5, 0x48, 0xa0, 0x05, 0xfd, 0x04, 0xdb, 0x2c, 0x1a, 0xf4,
	0x25, 0xcb, 0x6c, 0x0e, 0x93, 0x28, 0xb2, 0x39, 0x91, 0x44, 0x03, 0xd5, 0x5f, 0xa0, 0x81, 0x44,
	0x7d, 0x7f, 0x5b, 0xa3, 0x3e, 0xe5, 0xb0, 0x23, 0xeb, 0x59, 0x3a, 0x27, 0x2f, 0xc1, 0xcb, 0xd3,
	0xb9, 0x10, 0xf1, 0x8e, 0x5b, 0xbd, 0x6e, 0x98, 0x8d, 0x42, 0x13, 0x09, 0xc5, 0xe7, 0x2c, 0x29,
	0xf2, 0x05, 0x93, 0x09, 0xc1, 0x67, 0x68, 0x5a, 0x82, 0xb4, 0xc1, 0xfb, 0x85, 0x0b, 0xd3, 0x58,
	0x7e, 0x25, 0xcf, 0xa0, 0x71, 0x1d, 0x4f, 0x67, 0xfa, 0xb7, 0x68, 0xf5, 0x9a, 0x4b, 0x1d, 0x4d,
	0xbf, 0x77, 0xdf, 0x39, 0xf4, 0x8f, 0x03, 0xed, 0xd5, 0x90, 0x7a, 0x70, 0xf2, 0x06, 0x1a, 0x85,
	0x24, 0x8c, 0x81, 0xe7, 0xb2, 0xb0, 0x9a, 0x14, 0x2a, 0xa4, 0xbd, 0xe8, 0xec, 0xe0, 0x0c, 0x60,
	0x45, 0xd6, 0xf8, 0x79, 0xb1, 0xee, 0xa7, 0x55, 0x9a, 0xab, 0x64, 0xa9, 0xf7, 0xd7, 0x05, 0x88,
	0xc4, 0xca, 0x2e, 0xd4, 0x7b, 0x21, 0x1f, 0x01, 0x56, 0x87, 0x4d, 0x0e, 0x64, 0xd1, 0xad, 0x57,
	0x13, 0x3c, 0xac, 0xd2, 0x66, 0x85, 0x5b, 0x24, 0x84, 0x86, 0xba, 0x5c, 0xd2, 0x96, 0x29, 0xe5,
	0xc7, 0x10, 0x74, 0x4a, 0xcc, 0x32, 0x7f, 0x08, 0x9d, 0x5b, 0xa7, 0x49, 0x9e, 0x28, 0xab, 0x1b,
	0xee, 0x3d, 0x78, 0xba, 0x21, 0x6a, 0x35, 0x5f, 0x39, 0xe4, 0x1c, 0xf6, 0xd6, 0x6e, 0x8c, 0xf8,
	0xb2, 0xa6, 0xee, 0xcc, 0x83, 0xc3, 0x9a, 0xc8, 0xd2, 0xdd, 0x5b, 0x68, 0xda, 0x45, 0x90, 0x07,
	0xeb, 0x6b, 0xd1, 0xd5, 0xdd, 0xba, 0x5d, 0xd1, 0xad, 0xd1, 0x3d, 0xf5, 0xb7, 0xf3, 0xfa, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xfc, 0xb5, 0xa3, 0x8b, 0x04, 0x00, 0x00,
}
